[Error]
enum DbError {
  "KeyElementsError",
  "InternalDbError"
};

[Error]
enum TapleError {
  "ExecutionError",
  "NodeUnavailable",
  "NotFound",
  "InternalError",
  "DigestIdentifierGenerationFailed",
  "KeyIdentifierGenerationFailed",
  "SignatureIdentifierGenerationFailed",
  "InvalidKeyDerivator",
  "NoJSONString",
  "SignatureGenerationFailed",
  "LockIsPoisoned",
  "DeserializationError",
  "IncorrectGovernanceProperties"
};

[Error]
enum NotificationError{
  "NoConnection",
  "InternalError",
  "LockIsPoisoned"
};

[Error]
enum SettingsError{
  "InvalidListenAddr",
  "InternalError"
};

[Error]
enum InitializationError{
  "InvalidSettings",
  "StartFailed",
  "InternalError"
};

[Error]
enum ShutdownError{
  "InnerLockIsPoisoned",
  "InternalError"
};

interface UserSubject{
  [Throws=TapleError]
  string end_life_cicle();

  [Throws=TapleError]
  string new_fact_event(string payload);

  [Throws=TapleError]
  void refresh();

  [Throws=TapleError]
  string external_invokation(TapleSignedEventRequest event);

  UserGovernance? to_governance();

  string? get_subject_id();

  string? get_governance_id();

  u64? get_sn();

  string? get_public_key();

  string? get_namespace();

  string? get_schema_id();

  string? get_owner();

  string? get_creator();

  string? get_properties();
  
  string? get_subject_request();

  boolean? get_is_active();
};

[Enum]
interface Quorum {
  MAJORITY();
  FIXED(u64 value);
  PERCENTAGE(f64 value);
};

dictionary Validation {
  Quorum quorum;
};

dictionary Policy {
  string id;
  Validation approve;
  Validation evaluate;
  Validation validate;
};

dictionary Schema {
  string id;
  string schema;
  string initial_value;
};

dictionary Role {
  Who who;
  string namespace;
  RoleEnum role;
  SchemaEnum schema;
};

enum RoleEnum {
  "VALIDATOR",
  "CREATOR",
  "ISSUER",
  "WITNESS",
  "APPROVER",
  "EVALUATOR",
};

[Enum]
interface SchemaEnum {
  ID(string ID);
  NOT_GOVERNANCE();
  ALL();
};

[Enum]
interface Who {
  ID(string ID);
  NAME(string NAME);
  MEMBERS();
  ALL();
  NOT_MEMBERS();
};

interface UserGovernance{
  [Throws=TapleError]
  constructor(UserSubject subject);

  [Throws=TapleError]
  sequence<string> get_members();

  [Throws=TapleError]
  sequence<Schema> get_schemas();

  [Throws=TapleError]
  sequence<Policy> get_policies();
  
  [Throws=TapleError]
  sequence<Role> get_roles();

  [Throws=TapleError]
  void refresh();

  string get_subject_id();

  string get_governance_id();

  u64 get_sn();

  string get_public_key();

  string get_namespace();

  string get_schema_id();

  string get_owner();

  string get_creator();

  string get_properties();

  boolean get_is_active();
};


//Tuple sections
dictionary Tuple {
  string key;
  sequence<u8> value;
};

callback interface DbCollectionIteratorInterface {
  [Throws=DbError]
  Tuple? next();
};

callback interface DbCollectionInterface {
  [Throws=DbError]
  sequence<u8>? get(string key);
  [Throws=DbError]
  void put(string key, sequence<u8> value);
  [Throws=DbError]
  void del(string key);
  DbCollectionIteratorInterface iter(boolean reverse, string prefix);
};

callback interface DatabaseManagerInterface {
  DbCollectionInterface create_collection(string identifier);
};

[Enum]
interface EventRequestType {
  Create (string governance_id, string schema_id, string namespace, string name, string public_key);
  Fact (string subject_id, string payload);
  Transfer (string subject_id, string public_key);
  EOL (string subject_id);
};

dictionary TapleSignature {
  string signer;
  u64 timestamp;
  string value;
  string content_hash;
};

dictionary TapleSignedEventRequest {
  EventRequestType content;
  TapleSignature signature;
};

dictionary TapleSignedEvent {
  TapleEvent content;
  TapleSignature signature;
};

dictionary TapleSignedApprovalRequest {
  TapleApprovalRequest content;
  TapleSignature signature;
};

dictionary TapleSignedApprovalResponse {
  TapleApprovalResponse content;
  TapleSignature signature;
};

enum TapleRequestState {
  "Finished",
  "Error",
  "Processing",
};

dictionary TapleRequest {
  string id;
  string? subject_id;
  u64 sn;
  TapleSignedEventRequest event_request;
  TapleRequestState state;
  boolean success;
};

dictionary TapleEvent {
  string subject_id;
  TapleSignedEventRequest event_request;
  u64 sn;
  u64 gov_version;
  string patch;
  string state_hash;
  boolean eval_success;
  boolean appr_required;
  boolean approved;
  string hash_prev_event;
  record<DOMString, TapleSignature> evaluators;
  record<DOMString, TapleSignature> approvers;
};

dictionary SubjectAndProviders {
  string subject_id;
  sequence<string> providers;
};

dictionary ValidationProof {
  string subject_id;
  string schema_id;
  string namespace;
  string name;
  string subject_public_key;
  string governance_id;
  u64 genesis_governance_version;
  u64 sn;
  string prev_event_hash;
  string event_hash;
  u64 governance_version;
};

dictionary ValidationProofAndSignatures {
  ValidationProof validation_proof;
  sequence<TapleSignature> signatures;
};

dictionary TapleApprovalRequest {
  TapleSignedEventRequest event_request;
  u64 sn;
  u64 gov_version;
  string patch;
  string state_hash;
  string hash_prev_event;
  string gov_id;
};

dictionary TapleApprovalResponse {
  string appr_req_hash;
  boolean approved;
};

enum TapleApprovalState {
  "Pending",
  "RespondedAccepted",
  "RespondedRejected",
  "Obsolete",
};

dictionary TapleApprovalEntity {
  string id;
  TapleSignedApprovalRequest request;
  TapleSignedApprovalResponse? response;
  TapleApprovalState state;
};

enum TapleKeyDerivator {
  "Ed25519",
  "Secp256k1",
};

enum TapleDigestDerivator {
  "Blake3_256",
  "Blake3_512",
  "SHA2_256",
  "SHA2_512",
  "SHA3_256",
  "SHA3_512",
};

interface TapleAPI {
  [Throws=TapleError]
  TapleRequest get_request(string request_id);

  [Throws=TapleError]
  string external_request(TapleSignedEventRequest event_request);

  [Throws=TapleError]
  UserSubject get_subject(string subject_id);

  [Throws=TapleError]
  void add_preauthorize_subject(string subject_id, sequence<string> providers);

  [Throws=TapleError]
  string add_keys(string derivator);

  [Throws=TapleError]
  sequence<UserSubject> get_governances(string namespace, string? from, i64? quantity);

  [Throws=TapleError]
  sequence<UserSubject> get_subjects(string namespace, string? from, i64? quantity);

  [Throws=TapleError]
  sequence<UserSubject> get_subjects_by_governance(string governance_id, string? from, i64? quantity);

  [Throws=TapleError]
  sequence<TapleSignedEvent> get_events(string subject_id, i64? from, i64? quantity);

  [Throws=TapleError]
  TapleSignedEvent get_event(string subject_id, u64 sn);
  
  [Throws=TapleError]
  sequence<SubjectAndProviders> get_all_allowed_subjects_and_providers(string? from, i64? quantity);

  [Throws=TapleError]
  ValidationProofAndSignatures get_validation_proof(string subject_id);

  [Throws=TapleError]
  TapleSignature sign_event_request(EventRequestType event_request);
};

[Enum]
interface TapleNotification {
  NewSubject(string subject_id);
  NewEvent(u64 sn, string subject_id);
  StateUpdated(u64 sn, string subject_id);
  ApprovalReceived(string id, string subject_id, u64 sn);
  ObsoletedApproval(string id, string subject_id, u64 sn);
  UnrecoverableError(string error);
};

interface TapleNode {
  TapleAPI get_api();
  ShutdownSignal get_shutdown_handler();
  [Throws=NotificationError]
  TapleNotification receive_blocking();
  [Throws=TapleError]
  void drop_notifications();
  [Throws=TapleError]
  void handle_notifications(NotificationHandlerInterface handler);
  SubjectBuilder get_subject_builder();
  [Throws=TapleError]
  void shutdown_gracefully();
};

callback interface NotificationHandlerInterface {
  void process_notification(TapleNotification notification);
};

interface SubjectBuilder {

  [Throws=TapleError]
  void with_name(string name);

  [Throws=TapleError]
  void with_namespace(string namespace);
  
  [Throws=TapleError]
  UserSubject build(string governance_id, string schema_id);
};

interface ShutdownSignal {
  [Throws=ShutdownError]
  void shutdown();
};

dictionary TapleSettings {
  sequence<string> listen_addr;
  TapleKeyDerivator key_derivator;
  sequence<u8> private_key;
  sequence<string> known_nodes;
  TapleDigestDerivator derivator;
};

namespace taple_ffi {
  [Throws=InitializationError]
  TapleNode start(DatabaseManagerInterface manager, TapleSettings settings);
  sequence<u8> generate_key(TapleKeyDerivator key_derivator);
};